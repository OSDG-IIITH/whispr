services:
  nginx:
    image: nginx:alpine
    container_name: whispr-nginx
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      whispr-network:
        ipv4_address: 172.25.1.10

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: whispr-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=/whispr/api
    networks:
      - whispr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: whispr-backend
    volumes:
      - ./backend:/app
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/whispr
      - DATABASE_NAME=whispr
      - JWT_SECRET=change_me_in_production
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION=86400
      - CORS_ORIGINS=["https://osdg.iiit.ac.in"]
      - FRONTEND_URL=https://osdg.iiit.ac.in
      - COOKIE_DOMAIN=osdg.iiit.ac.in
      - COOKIE_SECURE=true
      - COOKIE_SAMESITE=lax
      - CAS_SERVICE_URL=https://osdg.iiit.ac.in/whispr/api/verify/callback
      - ALLOWED_EMAIL_DOMAINS=["students.iiit.ac.in", "research.iiit.ac.in"]
    networks:
      - whispr-network
      - backend-db-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  db:
    image: postgres:15-alpine
    container_name: whispr-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=whispr
    networks:
      - backend-db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d whispr"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  whispr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.1.0/24
  backend-db-network:
    driver: bridge

volumes:
  postgres_data:
